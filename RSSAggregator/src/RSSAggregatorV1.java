import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Jesse Shields
 *
 */
public final class RSSAggregatorV1 {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregatorV1() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<html>\n<head>");
        int titleLocation = getChildElement(channel, "title");
        if (channel.child(titleLocation).numberOfChildren() > 0) {
            out.println("<title>" + channel.child(titleLocation).child(0).label()
                    + "</title>\n</head>\n<body>");
        } else {
            out.println("<title>Emmpty Title</title>\n</head>\n<body>");
        }
        out.print("<h1>\n<a href=\""
                + channel.child(getChildElement(channel, "link")).child(0) + "\">");
        if (channel.child(titleLocation).numberOfChildren() > 0) {
            out.println(channel.child(titleLocation).child(0) + "</a>\n</h1>");
        } else {
            out.println("Empty Title</a>\\n</h1>\"");
        }
        if (getChildElement(channel, "description") >= 0 && channel
                .child(getChildElement(channel, "description")).numberOfChildren() > 0) {
            out.println("<p>\n"
                    + channel.child(getChildElement(channel, "description")).child(0));
        } else {
            out.println("<p>\nNo Description");
        }
        out.println("</p>\n<table border = \"1\">\n<tr>\n<th>Date</th>\n<th>Source</th>");
        out.println("<th>News</th>\n</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("</table>\n</body>\n</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int childNum = -1;
        for (int i = 0; i < xml.numberOfChildren() && childNum < 0; i++) {
            if (xml.child(i).label().equals(tag)) {
                childNum = i;
            }
        }
        return childNum;
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        SimpleWriter fileOutLinks = new SimpleWriter1L(file);
        /*
         * / Makes new XMLTree variable form the URL
         */
        XMLTree xml = new XMLTree1(url);
        /*
         * Extract <channel> element.
         */
        XMLTree channel = xml.child(0);
        if (xml.label().equals("rss") && xml.attributeValue("version").equals("2.0")) {
            outputHeader(channel, fileOutLinks);
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), fileOutLinks);
                }
            }
            outputFooter(fileOutLinks);
        }
        fileOutLinks.close();
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<tr>");
        int dateLocation = getChildElement(item, "pubDate");
        if (item.child(dateLocation).numberOfChildren() > 0
                && item.child(dateLocation).numberOfChildren() > 0) {
            out.println("<td>" + item.child(dateLocation).child(0) + "</td>");
        } else {
            out.println("<td>No Date Available</td>");
        }
        int sourceLocation = getChildElement(item, "source");
        if (sourceLocation >= 0) {
            out.println("<td>\n<a href=\""
                    + item.child(sourceLocation).attributeValue("url") + "\">"
                    + item.child(sourceLocation).attributeValue("url") + "</a>\n</td>");
        } else {
            out.println("<td>No source available</td>");
        }
        int descriptionLocation = getChildElement(item, "description");
        int titleLocation = getChildElement(item, "title");
        int linkLocation = getChildElement(item, "link");
        if (descriptionLocation >= 0) {
            if (linkLocation >= 0) {
                if (item.child(descriptionLocation).numberOfChildren() > 0) {
                    out.println("<td>\n<a href=\"" + item.child(linkLocation).child(0)
                            + "\">" + item.child(descriptionLocation).child(0) + "</td>");
                } else {
                    out.println("<td>No description Available</td>");
                }
            } else {
                if (item.child(descriptionLocation).numberOfChildren() > 0) {
                    out.println(
                            "<td>" + item.child(descriptionLocation).child(0) + "</td>");
                } else {
                    out.println("<td>No description Available</td>");
                }
            }

        } else if (titleLocation >= 0) {
            if (item.child(titleLocation).numberOfChildren() > 0) {
                out.println("<td>\n<a href=\"" + item.child(titleLocation).child(0)
                        + "\">" + item.child(titleLocation).child(0) + "</a>\n</td>");
            } else {
                out.println("<td>No title Available</td>");
            }
        } else {
            out.println("<td>No title available</td>");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        /*
         * Input the source URL.
         */
        out.print("Enter the URL of a collection of RSS 2.0 news feeds: ");
        String url = in.nextLine();
        out.println("What is the name of your output file?");
        String output = in.nextLine();
        SimpleWriter fileOut = new SimpleWriter1L(output);
        /*
         * Read XML input and initialize XMLTree. If input is not legal XML,
         * this statement will fail.
         */
        XMLTree inputs = new XMLTree1(url);
        fileOut.println("<html>\n<head>");
        fileOut.println("<title>" + inputs.attributeValue("title") + "</title>");
        fileOut.println("<body>\n<h2>" + inputs.attributeValue("title") + "</h2>\n<ul>");
        for (int i = 0; i < inputs.numberOfChildren(); i++) {
            fileOut.println("<li>\n<a href=");
            fileOut.println("\"" + inputs.child(i).attributeValue("name") + ".html \">"
                    + inputs.child(i).attributeValue("name") + "</a>\n</li>");
        }
        fileOut.println("</ul>\n</body>\n</html>");
        /*
         * / Takes each link in the index html file and processes them with the
         * processFeed method
         */
        for (int i = 0; i < inputs.numberOfChildren(); i++) {
            processFeed(inputs.child(i).attributeValue("url"),
                    inputs.child(i).attributeValue("name") + ".html", out);
        }

        in.close();
        out.close();
        fileOut.close();

    }

}
